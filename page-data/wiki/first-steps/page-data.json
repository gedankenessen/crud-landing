{"componentChunkName":"component---src-templates-wiki-entry-jsx","path":"/wiki/first-steps","result":{"data":{"markdownRemark":{"html":"<br/>\n<br/>\n<p>In this section were going to look at how to use crud. If you haven't installed crud yet, checkout the <a href=\"/wiki/installation\">Installation</a> section.</p>\n<h2 id=\"basics\">The basics</h2>\n<p>crud works by receiving <code>JSON</code> through a POST on an <code>endpoint</code> with the name of your choice.</p>\n<pre><code>POST 127.0.0.1:3004/build/products\n{\n  \"name\": \"Keyboard\",\n  \"color\": \"Silver\",\n  \"material\": [\"Metal\", \"Plastic\"]\n}\n</code></pre>\n<p>It'll then attach that <code>endpoint</code> to your account (which is identified by the token that you supply in the header).</p>\n<h2 id=\"token\">Obtaining a token</h2>\n<p>crud needs a token inside of the header of your requests to identify you. To obtain that token you first need to create an account.</p>\n<pre><code>POST 127.0.0.1:3004/user/register\n{\n  \"email\": \"foo@bar\",\n  \"password\": \"******\"\n}\n</code></pre>\n<p>If you get a <code>OK 200</code> as a response you can collect your token by sending the same <code>email</code> and <code>password</code> to <code>/login</code>:</p>\n<pre><code>POST 127.0.0.1:3004/user/login\n{\n  \"email\": \"foo@bar\",\n  \"password\": \"******\"\n}\n</code></pre>\n<p>You should receive something like this:</p>\n<pre><code class=\"language-json\">{\n  \"token\": \"eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiI2MzkyMzU3YTZhODQ1MDYyYmJjNDA1OTciLCJ2ZXIiOjAsImlhdCI6MTY3MDkzNDE2NDE3NywiZXhwIjoxNjczNTI2MTY0MTc3fQ.NHuBZplniKRq4vnNaZUD9rdJk0V2FQgY-TZhFUZX_MA\"\n}\n</code></pre>\n<p>Stick that token in your header under <code>Authorization</code> and you're good to go.</p>\n<h2 id=\"creating\">Creating your first endpoint</h2>\n<p>Having collected and stored our token, we can now use crud to handle our data:</p>\n<pre><code>POST 127.0.0.1:3004/build/products\n{\n  \"name\": \"Keyboard\",\n  \"color\": \"Silver\",\n  \"material\": [\"Metal\", \"Plastic\"]\n}\n</code></pre>\n<p>The above request adds a <code>/products</code> endpoint with an object containing the keys <code>name</code>, <code>color</code>, <code>material</code>. It's important to note that the <code>/build</code> path needs to be prefixed to our desired endpoint. This is so crud related endpoints don't cause a naming conflict (see the <a href=\"/wiki/api\">API</a> section for more).</p>\n<h2 id=\"querying\">Querying data</h2>\n<p>After our <code>POST</code> request we can access all basic CRUD methods on our new <code>/products</code> endpoint.</p>\n<pre><code>GET 127.0.0.1:3004/build/products\n[{\n  \"name\": \"Keyboard\",\n  \"color\": \"Silver\",\n  \"material\": [\"Metal\", \"Plastic\"],\n  \"_id\": \"6392357a6a845062bbc40597\"\n\n}]\n</code></pre>\n<p>crud also generates a unique <code>_id</code> for our item, which we can use to find it again:</p>\n<pre><code>GET 127.0.0.1:3004/build/products/6392357a6a845062bbc40597\n{\n  \"name\": \"Keyboard\",\n  \"color\": \"Silver\",\n  \"material\": [\"Metal\", \"Plastic\"],\n  \"_id\": \"6392357a6a845062bbc40597\"\n\n}\n</code></pre>\n<p>Or to update it:</p>\n<pre><code>PUT 127.0.0.1:3004/build/products/6392357a6a845062bbc40597\n{\n  \"name\": \"Keyboard\",\n  \"color\": \"Dark Grey\",\n  \"material\": [\"Metal\", \"Plastic\"],\n  \"_id\": \"6392357a6a845062bbc40597\"\n}\n</code></pre>\n<h2 id=\"changing\">Changing structure</h2>\n<p>During development the structure of our data might change. To improve development velocity crud will flush the database if it detects a change in structure.</p>\n<p>For instance, if we add a field documenting the dimensions of our product and <code>POST</code> it to <code>/products</code>:</p>\n<pre><code>POST 127.0.0.1:3004/build/products\n{\n  \"name\": \"Table\",\n  \"color\": \"Brown\",\n  \"material\": [\"Wood\", \"Metal\"],\n  \"size\": {\"x\": 30, \"y\": 12, \"z\": 6}\n}\n</code></pre>\n<p>crud will automatically clean up the previous entries:</p>\n<pre><code>GET 127.0.0.1:3004/build/products\n[{\n  \"name\": \"Table\",\n  \"color\": \"Brown\",\n  \"material\": [\"Wood\", \"Metal\"],\n  \"size\": {\"x\": 30, \"y\": 12, \"z\": 6},\n  \"_id\": \"6392357a6a845062bbc4a851\"\n}]\n</code></pre>\n<p>This is done to save us from headaches of <code>x.y is undefined</code> type errors. There are some additional changes to further improve DX, checkout the <a href=\"/wiki/edgecases\">Edgecases</a> section for more information.</p>\n<h2 id=\"next\">Next steps</h2>\n<p>You're now ready to use crud, so try it out. If you find any bugs feel free to <a href=\"https://github.com/gedankenessen/crud/issues\">report them</a>.\nAdditionally you can learn more about some of cruds edgecases in the <a href=\"/wiki/edgecases\">Edgecases</a> section.</p>\n<br/>\n<br/>\n<p><em>Last Edited: 2022.12.14; crud:1.1.0</em></p>","frontmatter":{"slug":"first-steps","title":"First Steps","description":""}}},"pageContext":{"id":"ffec3d39-3ebb-504a-b245-0aa051f5e303"}},"staticQueryHashes":["4165905740"]}